mads 2.0.8
Source: /home/paul/eclipse-workspace/atari_rcl_MenuDos/menu.asm
     1
     2 				;  This program is free software; you can redistribute it and/or modify
     3 				;  it under the terms of the GNU General Public License as published by
     4 				;  the Free Software Foundation; either version 2 of the License, or
     5 				;  (at your option) any later version.
     6 				;
     7 				;  This program is distributed in the hope that it will be useful,
     8 				;  but WITHOUT ANY WARRANTY; without even the implied warranty of
     9 				;  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    10 				;  GNU General Public License for more details.
    11 				;
    12 				;  You should have received a copy of the GNU General Public License
    13 				;  along with this program; if not, write to the Free Software
    14 				;  Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
    15 				;
    16 					icl 'menu_1.asm'
Source: /home/paul/eclipse-workspace/atari_rcl_MenuDos/menu_1.asm
     1 				;
     2 				;  This program is free software; you can redistribute it and/or modify
     3 				;  it under the terms of the GNU General Public License as published by
     4 				;  the Free Software Foundation; either version 2 of the License, or
     5 				;  (at your option) any later version.
     6 				;
     7 				;  This program is distributed in the hope that it will be useful,
     8 				;  but WITHOUT ANY WARRANTY; without even the implied warranty of
     9 				;  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    10 				;  GNU General Public License for more details.
    11 				;
    12 				;  You should have received a copy of the GNU General Public License
    13 				;  along with this program; if not, write to the Free Software
    14 				;  Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
    15 				;
    16
    17 = 0300			DDEVIC	equ $0300
    18 = 0301			DUNIT	equ $0301
    19 = 0302			DCOMND	equ $0302
    20 = 0303			DSTATS	equ $0303
    21 = 0304			DBUFLO	equ $0304
    22 = 0305			DBUFHI	equ $0305
    23 = 0306			DTIMLO	equ $0306
    24 = 0307			DUNUSE	equ $0307
    25 = 0308			DBYTLO	equ $0308
    26 = 0309			DBYTHI	equ $0309
    27 = 030A			DAUX1	equ $030A
    28 = 030B			DAUX2	equ $030B
    29 = 003C			NOCKSM	equ $003C
    30
    31 = 0342			iccom	equ $0342
    32 = 0344			icbadr	equ $0344
    33 = 0346			icptl	equ $0346
    34 = 0347			icpth	equ $0347
    35 = 0348			icblen	equ $0348
    36 = 034A			icaux1	equ $034A
    37 = 034B			icaux2	equ $034B
    38
    39 = E456			ciov	equ $e456
    40
    41 = D301			portb	equ $d301
    42
    43 = 000A			DOSVEC	equ $0A
    44 = 000C			DOSINI	equ $0C
    45
    46 = E459			SIOV	equ $E459
    47
    48 = FFC3			I_SETTD	equ $FFC3
    49 = FFC6			I_TDON	equ $FFC6
    50
    51
    52 					.enum Cmd
    53 = 0091			GetDR           = $91	
    54 = 0092			GetSL           = $92
    55 = 0093			GetTD	        = $93
    56 = 0094			Swap	     	= $94
    57 = 0095			Unmount		    = $95
    58 = 0096			Mount		    = $96
    59 = 0097			CreateAndMount	= $97
    60 = 0098			AutoToggle	    = $98
    61 = 0099			Save            = $99
    62 = 009A			MountAndBoot    = $9A   
    63 					.ende
    64
    65 					.enum DCB
    66 = 0000			PutDR	
    67 = 0001			GetDR	
    68 = 0002			GetSL
    69 = 0003			GetTD
    70 = 0004			Swap
    71 = 0005			Unmount
    72 = 0006			Mount
    73 = 0007			CreateAndMount
    74 = 0008			AutoToggle
    75 = 0009			GetDrvNum
    76 = 000A			Save
    77 = 000B			MountAndBoot
    78 					.ende
    79
    80
    81 = 0021			comfnam	equ $21
    82 = 000A			comtab	equ $0A
    83
    84 					org $80
    85 = 0080			Temp1		.ds 2
    86 = 0082			Temp2		.ds 2
    87 = 0084			Temp3		.ds 2
    88 = 0086			Temp4		.ds 2
    89 = 0088			LeadingZeroFlag	.ds 1
    90 = 0089			ArgIndex	.ds 1
    91 = 008A			FieldWidth	.ds 1
    92 = 008B			StringIndex	.ds 1
    93
    94 				.macro ldxy
    95 					ldx #< :1
    96 					ldy #> :1
    97 				.endm
    98
    99 				.macro ldax
   100 					lda #< :1
   101 					ldx #> :1
   102 				.endm
   103
   104 				.macro stax
   105 					sta :1
   106 					stx :1+1
   107 				.endm
   108
    17 					org $4000
    18 				Start
    19 FFFF> 4000-4DB3> 20 E8 + 	jsr printf
    20 4003 7D 9B 52 65 73 70 + 	.byte 125,155,'AspeQt Client        Version 0.1  ',155
    21 4029 20 20 20 20 20 20 + 	.byte         '                  for AspeQt 5.x ',155,155,155,0
    22 						
    23 404F				icl 'menu_2.asm'
Source: /home/paul/eclipse-workspace/atari_rcl_MenuDos/menu_2.asm
     1
     2 				;  This program is free software; you can redistribute it and/or modify
     3 				;  it under the terms of the GNU General Public License as published by
     4 				;  the Free Software Foundation; either version 2 of the License, or
     5 				;  (at your option) any later version.
     6 				;
     7 				;  This program is distributed in the hope that it will be useful,
     8 				;  but WITHOUT ANY WARRANTY; without even the implied warranty of
     9 				;  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    10 				;  GNU General Public License for more details.
    11 				;
    12 				;  You should have received a copy of the GNU General Public License
    13 				;  along with this program; if not, write to the Free Software
    14 				;  Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
    15 				;
    16 				 
    17 404F			Menu
    18 404F 20 E8 4B			jsr printf
    19 4052 41 20 4C 69 73 74 + 	.byte 'A List Slots     I List Host Images',155
    20 4076 42 20 4D 6F 75 6E + 	.byte 'B Mount Disk     J Auto Commit On',155
    21 4098 43 20 43 72 65 61 + 	.byte 'C Create Disk    K Auto Commit Off',155,0
    22 40BC 20 E8 4B		    jsr printf
    23 40BF 44 20 55 6E 4D 6F +     .byte 'D UnMount Disk   L Set Date',155
    24 40DB 45 20 53 61 76 65 + 	.byte 'E Save Disk      M TD Line On',155	
    25 40F9 46 20 53 77 61 70 + 	.byte 'F Swap Slot      N TD Line Off',155
    26 4118 47 20 42 6F 6F 74 + 	.byte 'G Boot Disk      O Exit to Dos',155
    27 4137 48 20 42 6F 6F 74 + 	.byte 'H Boot XEX/Exe   P Cold Reboot',155,0
    28 					
    29 4157			Main	
    30 4157 20 E8 4B		    jsr printf
    31 415A 9B 9B 45 6E 74 65 + 	.byte 155,155,'Enter Command or Return for Menu: ',0
    32 417F 20 60 4D			jsr Input1
    33 4182 B0 D3			bcs Main	
    34 4184 20 55 4D			jsr ToUpper
    35 					
    36 4187 C9 41			cmp #'A'
    37 4189 F0 6D		    jeq SlotName    
    38 418B C9 42		    cmp #'B'
    39 418D D0 03 4C 8F 43	    jeq Mount
    40 4192 C9 43		    cmp #'C'
    41 4194 D0 03 4C 98 43	    jeq CreateAndMount	
    42 4199 C9 44			cmp #'D'
    43 419B D0 03 4C 02 45	    jeq UnMount
    44 41A0 C9 45			cmp #'E'
    45 41A2 D0 03 4C B4 45	    jeq Save    
    46 41A7 C9 46		    cmp #'F'
    47 41A9 D0 03 4C 31 46	    jeq Swap
    48 41AE C9 47		    cmp #'G'
    49 41B0 D0 03 4C BF 42	    jeq BootATR
    50 41B5 C9 48		    cmp #'H'
    51 41B7 D0 03 4C C8 42	    jeq BootXEX
    52 41BC C9 49		    cmp #'I'    
    53 41BE D0 03 4C E2 47	    jeq ListDir   
    54 41C3 C9 4A		    cmp #'J'    
    55 41C5 D0 03 4C 03 47	    jeq CommitOn
    56 41CA C9 4B		    cmp #'K'    
    57 41CC D0 03 4C 08 47	    jeq CommitOff  
    58 41D1 C9 4C		    cmp #'L'
    59 41D3 D0 03 4C 17 49	    jeq GetTD
    60 41D8 C9 4D		    cmp #'M'
    61 41DA D0 03 4C 25 49	    jeq GetTDOn
    62 41DF C9 4E		    cmp #'N'
    63 41E1 D0 03 4C 3A 49	    jeq GetTDOff
    64 41E6 C9 4F			cmp #'O'
    65 41E8 D0 03 4C B7 4A	    jeq Exit
    66 41ED C9 50			cmp #'P'
    67 41EF D0 03 4C D6 4A	    jeq Reboot
    68
    69 41F4 4C 00 40			jmp Start
    70 					
    71 					
    72 41F7			.proc init
    73 41F7 60			      rts
    74 				.endp  	
    75 					
    76 					
    77
    78 				//	
    79 				//  get disk in slot
    80 				//    
    81 41F8			.proc SlotName
    82 41F8 20 E8 4B		    jsr printf
    83 41FB 9B 45 6E 74 65 72 + 	.byte 155,'Enter Slot [1-9] [J-O] [*] : ',0
    84 					
    85 421A 20 60 4D		    jsr input1
    86 421D 90 03 4C 57 41	    jcs main
    87 4222 20 55 4D		    jsr toUpper   
    88 4225 20 82 4A		    jsr GetDrvWC
    89 4228 90 03 4C 57 41	    jcs main
    90 				    
    91 422D 8D B1 4D		    sta drive
    92 4230 C9 FA			cmp #$FA
    93 4232 D0 3B			bne OneSlot
    94 4234			MultiSlot
    95 4234 A2 01		    ldx #$01
    96 4236 8E D8 4E		    stx lp
    97 4239			LOOPa
    98 4239 8A			    txa  
    99 423A 8D B1 4D		    sta drive
   100 423D 20 75 42		    jsr getSlotFileName
   101 4240 AD D8 4E 18 69 01 +     adb lp #01
   102 4249 AE D8 4E		    ldx lp
   103 424C E0 0A		    cpx #$0A
   104 424E D0 E9		    bne LOOPa
   105
   106 4250 A2 1A		    ldx #$1A
   107 4252 8E D8 4E		    stx lp
   108 4255			LOOPb
   109 4255 8A			    txa  
   110 4256 8D B1 4D		    sta drive
   111 4259 20 75 42		    jsr getSlotFileName
   112 425C AD D8 4E 18 69 01 +     adb lp #01
   113 4265 AE D8 4E		    ldx lp
   114 4268 E0 20		    cpx #$20
   115 426A D0 E9		    bne LOOPb
   116 426C 4C 57 41		    jmp Main       
   117 426F			OneSlot
   118 426F 20 75 42		    jsr getSlotFileName
   119 4272 4C 57 41		    jmp Main
   120 				.endp
   121
   122 4275			.proc getSlotFileName
   123 4275 A9 02		   lda #DCB.GetSL
   124 4277 20 28 4B		   jsr SetUpDCB
   125 427A AD B1 4D 8D 0A 03	   mva drive DAUX1
   126 4280 20 59 E4		   jsr SIOV
   127 4283 10 1A		   bpl OKa
   128 4285 20 E8 4B		   jsr Printf
   129 4288 9B 4E 6F 20 73 65 +    .byte 155,'No server response!',0
   130 429D 38			   sec
   131 429E 60			   rts
   132 429F			OKa
   133 429F AD B1 4D 18 69 30 +     adb drive #$30
   134 42A8 20 E8 4B		jsr Printf
   135 42AB 9B 20 53 6C 6F 74 + 	.byte 155,' Slot %c: %s',0
   136 42B9 B1 4D B4 4D			.word Drive, Path
   137 42BD 18				clc
   138 42BE 60				rts	
   139 				.endp
   140
   141 				//
   142 				//	Mount disk and boot!
   143 				//
   144 42BF			.proc BootATR
   145 42BF A9 00			lda #0
   146 42C1 8D AE 4D			sta ArgFlag
   147 42C4 18				clc
   148 42C5 4C CE 42			jmp MountAndBoot
   149 				.endp
   150
   151 42C8			.proc BootXEX
   152 42C8 A9 01			lda #1
   153 42CA 8D AE 4D			sta ArgFlag
   154 42CD 18				clc
   155 				.endp
   156
   157 42CE			.proc  MountAndBoot
   158 42CE 20 E8 4B		    jsr printf
   159 42D1 9B 45 6E 74 65 72 + 	.byte 155,'Enter [FILENAME.EXT]: ',0
   160 42E9 20 86 4D		    jsr input
   161 42EC 90 03 4C 57 41	    jcs main
   162 42F1 C0 03		    cpy #03
   163 42F3 10 03 4C 57 41	    jmi main    
   164 42F8 A2 00		    ldx #0
   165 42FA			loopB   
   166 42FA BD D9 4E		    lda InputBuf,x
   167 42FD C9 9B			cmp #155
   168 42FF F0 09		    beq doMountAndBoot
   169 4301			StoreB        
   170 4301 20 55 4D		    jsr ToUpper	
   171 4304 9D DA 4D		    sta IOBuf,x
   172 4307 E8			    inx
   173 4308 D0 F0		    bne loopB
   174 				.endp 
   175 				   
   176 430A			.proc doMountAndBoot
   177 430A A9 00			lda #0
   178 430C 9D DA 4D			sta IOBuf,x       	
   179 430F A9 0B			lda #DCB.MountAndBoot	
   180 4311 20 28 4B			jsr SetUpDCB
   181 4314 AD AE 4D 8D 0B 03		mva ArgFlag DAUX2
   182 431A 20 59 E4			jsr SIOV
   183 431D 10 1F			bpl OKB
   184 431F 20 E8 4B			jsr Printf
   185 4322 9B 45 72 72 6F 72 + 	.byte 155,'Error mounting image!',155,0
   186 433A 38				sec
   187 433B 4C 57 41			jmp main
   188 433E			OKB			; image mounted
   189 433E 20 E8 4B			jsr Printf
   190 4341 9B 9B 20 52 65 61 + 	.byte 155,155,' Ready to reboot! - press [Return]'
   191 4365 9B 20 20 59 6F 75 + 	.byte 155,    '  You may need to press [Option]: ',0	
   192 4389 20 60 4D			jsr Input1
   193 438C 4C 77 E4			jmp $E477
   194 				.endp
   195
   196
   197 				//------------------------------------------------------
   198 				//
   199 				//	Mount disk
   200 				//
   201 438F			.proc Mount
   202 438F A9 00			lda #0
   203 4391 8D AF 4D			sta CreateFlag
   204 4394 18				clc
   205 4395 4C 0D 44			jmp doMount
   206 				.endp
   207 				//
   208 				//	Create and mount
   209 				//
   210 4398			.proc CreateAndMount
   211 4398 20 E8 4B		    jsr printf
   212 439B 9B 20 20 5B 31 5D +     .byte 155,'  [1] SSSD  [2] SSED  [3] SSDD'
   213 43BA 9B 20 20 5B 34 5D + 	.byte 155,'  [4] DSDD  [5] DDHD  [6] QDHD'
   214 43D9 9B 9B 45 6E 74 65 + 	.byte 155,155,'Enter Disk Type : ',0
   215 43EE 20 60 4D			jsr input1
   216 43F1 90 03 4C 57 41	    jcs main
   217 43F6 A8			    tay
   218 43F7 C9 37		    cmp #'6'+1
   219 43F9 90 03 4C 57 41		jcs main
   220 43FE E9 2F		    sbc #'0'-1
   221 4400 B0 03 4C 57 41		jcc main
   222 4405 D0 03 4C 57 41		jeq main	
   223 440A 8C AF 4D		    sty CreateFlag 	
   224 				.endp
   225
   226 440D			.proc DoMount
   227 440D A0 00		    ldy #0
   228 440F 8C AE 4D		    sty  ArgFlag
   229 4412			noDot1
   230 4412 20 E8 4B		    jsr printf
   231 4415 9B 45 6E 74 65 72 + 	.byte 155,'Enter [FILENAME.EXT]: ',0
   232 442D 20 86 4D		    jsr input
   233 4430 90 03 4C 57 41	    jcs main
   234 4435 C0 03		    cpy #03
   235 4437 10 03 4C 57 41	    jmi main    
   236 443C A2 00		    ldx #0
   237 443E			loop1    
   238 443E E0 0D		    cpx #13
   239 4440 F0 D0		    beq noDot1
   240 4442 BD D9 4E		    lda InputBuf,x
   241 4445 C9 9B			cmp #155
   242 4447 F0 12		    beq FlFin1
   243 4449 C9 2E		    cmp #'.'
   244 444B D0 05		    bne Store1
   245 444D A0 01		    ldy #01
   246 444F 8C AE 4D		    sty ArgFlag
   247 4452			Store1        
   248 4452 20 55 4D		    jsr ToUpper	
   249 4455 9D DA 4D		    sta IOBuf,x
   250 4458 E8			    inx
   251 4459 D0 E3		    bne Loop1
   252 445B			FlFin1
   253 445B AC AE 4D		    ldy ArgFlag
   254 445E C0 00		    cpy #0
   255 4460 F0 B0		    beq noDot1
   256 4462 AC AF 4D		    ldy CreateFlag
   257 4465 C0 00		    cpy #0
   258 4467 F0 0B		    beq AllDone1
   259 4469 A9 2E		    lda #'.' 
   260 446B 9D DA 4D		    sta IOBuf,x
   261 446E E8			    inx
   262 446F 98			    tya
   263 4470 9D DA 4D		    sta IOBuf,x
   264 4473 E8			    inx
   265 4474			AllDone1
   266 4474 A9 00			lda #0
   267 4476 9D DA 4D			sta IOBuf,x       	
   268 4479 A9 06			lda #DCB.Mount
   269 					
   270 447B C0 00			cpy #0
   271 447D F0 02			beq goMount
   272 447F A9 07			lda #DCB.CreateAndMount
   273 4481			goMount
   274 4481 20 28 4B			jsr SetUpDCB
   275 4484 20 59 E4			jsr SIOV
   276 4487 10 1F			bpl OK3
   277 4489 20 E8 4B			jsr Printf
   278 448C 9B 45 72 72 6F 72 + 	.byte 155,'Error mounting image!',155,0
   279 44A4 38				sec
   280 44A5 4C 57 41			jmp main
   281
   282 44A8			OK3			; image mounted, so now get drive number
   283 44A8 A9 09			lda #DCB.GetDrvNum
   284 44AA 20 28 4B			jsr SetUpDCB
   285 44AD 20 59 E4			jsr SIOV
   286 44B0 10 26			bpl OK4
   287 					
   288 44B2 20 E8 4B			jsr Printf
   289 44B5 45 72 72 6F 72 20 + 	.byte 'Error obtaining drive number!',155,0
   290 44D4 38				sec
   291 44D5 4C 57 41			jmp main
   292 44D8			OK4
   293 44D8 AD DA 4D			lda IOBuf
   294 44DB 18				clc
   295 44DC 69 01			adc #1	; bump drive number since server returns drive-1
   296 44DE 20 24 4B			jsr MakeDriveID
   297 44E1 8D B2 4D			sta DriveID1
   298 44E4 20 E8 4B			jsr Printf
   299 44E7 4D 6F 75 6E 74 65 + 	.byte 'Mounted on drive %c',155,0
   300 44FC B2 4D			.word DriveID1
   301 44FE 18				clc
   302 44FF 4C 57 41			jmp main
   303 				.endp
   304
   305
   306 				//
   307 				//	Unmount disk
   308 				//
   309 4502			.proc UnMount
   310 4502 20 E8 4B		    jsr printf
   311 4505 9B 45 6E 74 65 72 + 	.byte 155,'Enter Slot [1-9] [J-O] [*]: ',0
   312 4523 20 60 4D		    jsr input1
   313 4526 90 03 4C 57 41	    jcs main
   314 452B 20 55 4D		    jsr toUpper
   315 452E 20 82 4A			jsr GetDrvWC
   316 4531 90 03 4C 57 41		jcs main	
   317 4536 8D B1 4D			sta Drive
   318 4539 A9 05			lda #DCB.Unmount
   319 453B 20 28 4B			jsr SetUpDCB
   320 453E AD B1 4D 8D 0B 03		mva Drive DAUX2
   321 4544 20 59 E4			jsr SIOV
   322 4547 10 22			bpl OK6	
   323 4549 20 E8 4B			jsr Printf
   324 454C 9B 45 72 72 6F 72 + 	.byte 155,'Error unmounting volume!',155,0
   325 4567 38				sec
   326 4568 4C 57 41			jmp main
   327 456B			OK6
   328 456B AD B1 4D			lda Drive
   329 456E C9 FA			cmp #-6		 
   330 4570 F0 24			beq AllDrives
   331 4572 20 24 4B			jsr MakeDriveID
   332 4575 8D B2 4D			sta DriveID1
   333 4578 20 E8 4B			jsr Printf
   334 457B 9B 44 72 69 76 65 + 	.byte 155,'Drive %c unmounted',155,0
   335 4590 B2 4D			.word DriveID1
   336 4592 18				clc
   337 4593 4C 57 41			jmp main
   338 4596			AllDrives
   339 4596 20 E8 4B			jsr Printf
   340 4599 9B 41 6C 6C 20 64 + 	.byte 155,'All drives unmounted',155,0
   341 45B0 18				clc
   342 45B1 4C 57 41			jmp main
   343 				.endp
   344
   345 					
   346 				//
   347 				//	Save disks
   348 				//
   349 45B4			.proc Save
   350 45B4 20 E8 4B		    jsr printf
   351 45B7 9B 45 6E 74 65 72 + 	.byte 155,'Enter Slot [1-9] [J-O] [*]: ',0
   352 45D5 20 60 4D		    jsr input1
   353 45D8 90 03 4C 57 41	    jcs main
   354 45DD 20 55 4D		    jsr toUpper
   355 45E0 20 82 4A			jsr GetDrvWC
   356 45E3 90 03 4C 57 41		jcs main	
   357 45E8 8D B1 4D			sta Drive
   358 45EB A9 0A			lda #DCB.Save
   359 45ED 20 28 4B			jsr SetUpDCB
   360 45F0 AD B1 4D 8D 0B 03		mva Drive DAUX2
   361 45F6 20 59 E4			jsr SIOV
   362 45F9 10 1F			bpl OK7	
   363 45FB 20 E8 4B			jsr Printf
   364 45FE 9B 4E 6F 74 68 69 + 	.byte 155,'Nothing can be saved!',155,0
   365 4616 38				sec
   366 4617 4C 57 41			jmp main
   367 461A			OK7
   368 461A 20 E8 4B			jsr Printf
   369 461D 9B 44 69 73 6B 28 + 	.byte 155,'Disk(s) saved',155,0
   370 462D 18				clc	
   371 462E 4C 57 41			jmp main
   372 				.endp
   373 					
   374 					
   375 					
   376 				//
   377 				//	Disk Swap
   378 				//
   379 4631			.proc Swap
   380 4631 20 E8 4B		    jsr printf
   381 4634 9B 45 6E 74 65 72 +     .byte 155,'Enter Slot 1  [1-9] [J-O]: ',0
   382 4651 20 60 4D		    jsr input1
   383 4654 90 03 4C 57 41	    jcs main
   384 4659 20 55 4D		    jsr toUpper
   385 465C 20 84 4A			jsr GetDrv
   386 465F 90 03 4C 57 41		jcs main 
   387 4664 8D B0 4D			sta Slot
   388 4667 20 24 4B			jsr MakeDriveID	; make some drive IDs for later
   389 466A 8D B2 4D			sta DriveID1
   390
   391 466D 20 E8 4B		    jsr printf
   392 4670 9B 45 6E 74 65 72 +     .byte 155,'Enter Slot 2  [1-9] [J-O]: ',0
   393 468D 20 60 4D		    jsr input1
   394 4690 90 03 4C 57 41	    jcs main
   395 4695 20 55 4D		    jsr toUpper
   396 4698 20 84 4A			jsr GetDrv
   397 469B 90 03 4C 57 41		jcs main
   398 46A0 8D B1 4D			sta Drive
   399 46A3 20 24 4B			jsr MakeDriveID
   400 46A6 8D B3 4D			sta DriveID2
   401
   402 46A9 A9 04			lda #DCB.Swap
   403 46AB 20 28 4B			jsr SetUpDCB
   404 46AE AD B0 4D 8D 0A 03		mva Slot DAUX1
   405 46B4 AD B1 4D 8D 0B 03		mva Drive DAUX2
   406 46BA 20 59 E4			jsr SIOV
   407 46BD 10 1F			bpl OK1
   408 46BF 20 E8 4B			jsr Printf
   409 46C2 9B 45 72 72 6F 72 + 	.byte 155,'Error swapping disks!',155,0
   410 46DA 38				sec
   411 46DB 4C 57 41			jmp Main
   412 46DE			OK1
   413 46DE 20 E8 4B			jsr Printf
   414 46E1 9B 53 77 61 70 70 + 	.byte 155,'Swapped disk %c with %c',155,0
   415 46FB B2 4D B3 4D			.word DriveID1,DriveID2
   416 46FF 18				clc	
   417 4700 4C 57 41			jmp Main
   418 				.endp
   419
   420 				//
   421 				//  Toggle Auto Commit
   422 				//
   423 4703			.proc CommitOn
   424 4703 A0 01		      LDY #01
   425 4705 4C 0A 47		      jmp ToggleCommit
   426 				.endp      
   427 4708			.proc Commitoff
   428 4708 A0 00		      LDY #00
   429 				.endp      
   430 470A			.proc ToggleCommit
   431 470A 8C AE 4D		    sty ArgFlag
   432 470D 20 E8 4B		    jsr printf
   433 4710 9B 45 6E 74 65 72 + 	.byte 155,'Enter Slot [1-9] [J-O] [*]: ',0
   434 472E 20 60 4D		    jsr input1
   435 4731 90 03 4C 57 41	    jcs main
   436 4736 20 55 4D		    jsr toUpper 
   437 4739 20 82 4A			jsr GetDrvWC
   438 473C 90 03 4C 57 41		jcs main
   439 4741 8D B1 4D			sta Drive
   440 4744 A9 08			lda #DCB.AutoToggle
   441 4746 20 28 4B			jsr SetUpDCB
   442 4749 AD B1 4D 8D 0A 03		mva Drive DAUX1 
   443 474F AD AE 4D 8D 0B 03		mva ArgFlag DAUX2
   444 4755 20 59 E4			jsr SIOV
   445 4758 10 25			bpl OK2
   446 475A 20 E8 4B			jsr Printf
   447 475D 9B 45 72 72 6F 72 + 	.byte 155,'Error toggling auto-commit!',155,0
   448 477B 38				sec
   449 477C 4C 57 41			jmp Main
   450 477F			OK2
   451 477F AD B1 4D			lda Drive
   452 4782 C9 FA			cmp #-6
   453 4784 F0 31			beq AllDrives
   454 4786 20 24 4B			jsr MakeDriveID
   455 4789 8D B2 4D			sta DriveID1
   456 478C 20 E8 4B			jsr Printf
   457 478F 9B 41 75 74 6F 2D + 	.byte 155,'Auto-commit toggled on drive %c',155,0
   458 47B1 B2 4D			.word DriveID1
   459 47B3 18				clc
   460 47B4 4C 57 41			jmp main
   461 					
   462 47B7			AllDrives
   463 47B7 20 E8 4B			jsr Printf
   464 47BA 9B 41 75 74 6F 2D + 	.byte 155,'Auto-commit toggled on all drives',155,0
   465 47DE 18				clc
   466 47DF 4C 57 41			jmp main
   467 					.endp
   468
   469
   470 				//
   471 				//  List pth folder 
   472 				//
   473 				// 
   474 47E2			.proc ListDir
   475 47E2 A2 00		    ldx #$00
   476 47E4 8E D8 4E		    stx lp
   477 				 
   478 47E7 20 E8 4B		    jsr printf
   479 47EA 9B 45 6E 74 65 72 + 	.byte 155,'Enter File Filter [fn*]: ',0
   480 4805 20 86 4D		    jsr input
   481 4808 90 03 4C 57 41	    jcs main
   482 480D A2 00		    ldx #0
   483 480F			loop2    
   484 480F BD D9 4E		    lda InputBuf,x
   485 4812 C9 9B			cmp #155
   486 4814 F0 09		    beq FlFin2
   487 4816 20 55 4D		    jsr ToUpper	
   488 4819 9D DA 4D		    sta IOBuf,x
   489 481C E8			    inx
   490 481D D0 F0		    bne Loop2
   491 481F			FlFin2
   492 481F A9 00			lda #0
   493 4821 9D DA 4D			sta IOBuf,x   
   494 				    
   495 4824 A9 00		    lda #DCB.PutDR
   496 4826 20 28 4B		    jsr SetUpDCB
   497 4829 20 59 E4		    jsr SIOV
   498 482C 10 1D		    bpl list2
   499 482E 20 E8 4B		    jsr Printf
   500 4831 9B 4E 6F 20 73 65 +     .byte 155,'No server response!',155,0
   501 4847 38			    sec
   502 4848 4C 57 41		    jmp Main
   503 484B			list2    
   504 484B A9 01		    lda #DCB.GetDR
   505 484D 20 28 4B		    jsr SetUpDCB
   506 4850 AD D8 4E 8D 0A 03	    mva lp   DAUX1
   507 4856 A9 01 8D 0B 03	    mva #$01 DAUX2
   508 485B 20 59 E4		    jsr SIOV
   509 485E 10 1D		    bpl OK2a
   510 4860 20 E8 4B		    jsr Printf
   511 4863 9B 4E 6F 20 73 65 +     .byte 155,'No server response!',155,0
   512 4879 38			    sec
   513 487A 4C 57 41		    jmp Main
   514 487D			OK2a
   515 487D 20 E8 4B		    jsr Printf
   516 4880 9B 25 73 9B 00	   .byte 155,'%s',155,0
   517 4885 DA 4D		   .word IOBuf
   518 4887 20 E8 4B			jsr Printf
   519 488A 53 65 6C 65 63 74 + 	.byte 'Select [A-P][Q]=quit [Return]=more: ',0
   520 48AF 20 1B 4B			jsr getkey
   521 48B2 20 55 4D			jsr ToUpper
   522 48B5 C9 51			cmp #'Q'
   523 48B7 F0 16			beq allDone2
   524 48B9 C9 9B			cmp #155
   525 48BB F0 08			beq next2
   526 48BD 20 D3 48		    jsr ioBufLookup	
   527 48C0 B0 03 4C 0A 43	    jcc doMountAndBoot
   528 48C5			next2       
   529 48C5 AE D8 4E		 	ldx lp
   530 48C8 E0 00		 	cpx #00
   531 48CA F0 03 4C 4B 48	 	jne list2 
   532 48CF			allDone2
   533 48CF 18				clc
   534 48D0 4C 57 41			jmp Main	
   535 				.endp
   536
   537
   538 48D3			.proc ioBufLookup
   539 48D3 8D AD 4D		    sta SelectB
   540 48D6 38			    sec
   541 48D7 A2 00			ldx #0
   542 48D9 A0 00			ldy #0
   543 48DB			loop
   544 48DB B9 DA 4D		    lda IOBuf,y
   545 48DE C9 9B		    cmp #155
   546 48E0 F0 06		    beq fin1
   547 48E2 C8				iny
   548 48E3 D0 F6		    bne Loop
   549 48E5 4C 16 49		    jmp abort
   550 48E8			fin1      	// check an option -  skip the space 1
   551 48E8 C9 00		    cmp #0
   552 48EA F0 2A		    beq abort
   553 48EC C8				iny
   554 48ED B9 DA 4D			lda IOBuf,y  
   555 48F0 C9 00		    cmp #0
   556 48F2 F0 22		    beq abort
   557 48F4 C8			    iny
   558 48F5 B9 DA 4D		    lda IOBuf,y
   559 48F8 CD AD 4D		    cmp SelectB
   560 48FB D0 DE		    bne loop
   561 48FD C8			    iny			// skip  skip the space 2
   562 48FE C8			    iny
   563 48FF			loop2    
   564 48FF B9 DA 4D		    lda IOBuf,y
   565 4902 C9 9B		    cmp #155 
   566 4904 F0 07		    beq alldone       
   567 4906 9D DA 4D		    sta IOBuf,x
   568 4909 C8			    iny
   569 490A E8			    inx
   570 490B D0 F2		    bne loop2 
   571 490D			alldone    
   572 490D A9 00		    lda #0
   573 490F 9D DA 4D		    sta IOBuf,x
   574 4912 8D AE 4D			sta ArgFlag
   575 4915 18			    clc
   576 4916			abort
   577 4916 60			    rts 
   578 				.endp
   579
   580
   581 				//
   582 				//	Time/Date Set
   583 				//
   584 4917			.proc GetTD
   585 4917 20 58 4A		    jsr isSparta
   586 491A 90 03 4C 57 41	    jcs main
   587 491F 20 4F 49			jsr SetTD	
   588 4922 4C 57 41			jmp Main
   589 				.endp
   590
   591 				//
   592 				//  Time set, enable TD line
   593 				//
   594 4925			.proc GetTDOn
   595 4925 20 58 4A		    jsr isSparta
   596 4928 90 03 4C 57 41	    jcs main
   597 492D 20 4F 49			jsr SetTD
   598 4930 B0 05			bcs Abort1
   599 4932 A0 01			ldy #1
   600 4934 20 07 4A			jsr TDLineOnOff
   601 4937			Abort1
   602 4937 4C 57 41			jmp Main
   603 				.endp
   604
   605
   606 				//
   607 				//	Time set, disable TD line
   608 				//
   609 493A			.proc GetTDOff
   610 493A 20 58 4A		    jsr isSparta
   611 493D 90 03 4C 57 41	    jcs main
   612 4942 20 4F 49			jsr SetTD
   613 4945 B0 05			bcs Abort2
   614 4947 A0 00			ldy #0
   615 4949 20 07 4A			jsr TDLineOnOff
   616 494C			Abort2	
   617 494C 4C 57 41		    jmp Main
   618 				 .endp 
   619
   620
   621 				//
   622 				//	Read date and time from the server and set the clock
   623 				//
   624 494F			.proc SetTD
   625 494F A9 03			lda #DCB.GetTD
   626 4951 20 28 4B			jsr SetUpDCB
   627 4954 20 59 E4			jsr SIOV
   628 4957 10 1B			bpl OK5
   629 4959 20 E8 4B			jsr Printf
   630 495C 9B 4E 6F 20 73 65 + 	.byte 155,'No server response!',155,0
   631 4972 38				sec
   632 4973 60				rts
   633 					
   634 4974			OK5	; got date and time from server, so attempt to set Sparta clock
   635 4974 20 E8 4B			jsr Printf
   636 4977 9B 44 61 74 65 20 + 	.byte 155,'Date received from server',155,0
   637 4993 AD 01 07			lda $701
   638 4996 C9 44			cmp #$44
   639 4998 B0 21			bcs IsSDX2
   640 499A A2 05			ldx #5
   641 499C A0 12			ldy #$0D+$05
   642 499E			@
   643 499E BD DA 4D			lda IOBuf,x
   644 49A1 91 0A			sta (comtab),y
   645 49A3 88				dey
   646 49A4 CA				dex
   647 49A5 10 F7			bpl @-
   648 					
   649 49A7 AD 01 D3			lda portb
   650 49AA 48				pha
   651 49AB 29 FE			and #$FE
   652 49AD 8D 01 D3			sta portb
   653 49B0 20 C3 FF			jsr I_SETTD	; this will fail if the vectors aren't there
   654 49B3 68				pla
   655 49B4 8D 01 D3			sta portb
   656 49B7 90 39			bcc TDSetOK
   657 49B9 B0 17			bcs TDSetFailed
   658 					
   659 49BB			IsSDX2			; with SDX, use kernel
   660 49BB A2 05			ldx #5
   661 49BD			@
   662 49BD BD DA 4D			lda IOBuf,x
   663 49C0 9D 7B 07			sta $077B,x
   664 49C3 CA				dex
   665 49C4 10 F7			bpl @-
   666 					
   667 49C6 A0 65			ldy #$65
   668 					
   669 49C8 A9 10			lda #$10
   670 49CA 8D 61 07			sta $0761
   671 49CD 20 03 07			jsr $0703
   672 49D0 F0 20			beq TDSetOK
   673 					
   674 49D2			TDSetFailed
   675 49D2 20 E8 4B			jsr Printf
   676 49D5 9B 45 72 72 6F 72 + 	.byte 155,'Error setting time/date!',155,0
   677 49F0 38				sec
   678 49F1 60				rts
   679 					
   680 49F2			TDSetOK
   681 49F2 20 E8 4B			jsr Printf
   682 49F5 9B 54 69 6D 65 2F + 	.byte 155,'Time/date set',155,0
   683 4A05 18				clc
   684 4A06 60				rts
   685 				.endp
   686
   687
   688
   689 				//
   690 				//	Enable or disable the TD Line
   691 				//	Y = 0: Turn off
   692 				//	Y = 1: Turn on
   693 				//
   694 4A07			.proc TDLineOnOff
   695 4A07 AD 01 07			lda $701
   696 4A0A C9 44			cmp #$44
   697 4A0C B0 13			bcs IsSDX1
   698 					
   699 4A0E AD 01 D3			lda portb
   700 4A11 48				pha
   701 4A12 29 FE			and #$FE
   702 4A14 8D 01 D3			sta portb
   703 4A17 20 C6 FF			jsr I_TDON
   704 4A1A 68				pla
   705 4A1B 8D 01 D3			sta portb
   706 4A1E B0 19			bcs TDOnFailed
   707 4A20 60				rts
   708 					
   709 4A21			IsSDX1
   710 4A21 84 82			sty Temp2
   711 4A23				ldax Symbol	; under SDX, enable TD using kernel
Macro: LDAX [Source: /home/paul/eclipse-workspace/atari_rcl_MenuDos/menu_1.asm]
     1 4A23 A9 C7			lda #< SYMBOL
     2 4A25 A2 4B			ldx #> SYMBOL
Source: /home/paul/eclipse-workspace/atari_rcl_MenuDos/menu_2.asm
   712 4A27 20 EB 07			jsr $07EB	; get symbol address
   713 4A2A 30 0D			bmi TDOnFailed
   714
   715 4A2C				stax TDVec+1	; store address
Macro: STAX [Source: /home/paul/eclipse-workspace/atari_rcl_MenuDos/menu_1.asm]
     1 4A2C 8D 35 4A			sta TDVEC+1
     2 4A2F 8E 36 4A			stx TDVEC+1+1
Source: /home/paul/eclipse-workspace/atari_rcl_MenuDos/menu_2.asm
   716 4A32 A4 82			ldy Temp2
   717 4A34			TDVec
   718 4A34 20 FF FF			jsr $FFFF	; should really check for errors...
   719 4A37 18				clc
   720 4A38 60				rts
   721 					
   722 4A39			TDOnFailed
   723 4A39 20 E8 4B			jsr Printf
   724 4A3C 9B 45 72 72 6F 72 + 	.byte 155,'Error enabling TD Line!',155,0
   725 4A56 38				sec
   726 4A57 60				rts
   727 				.endp
   728
   729
   730 4A58			.proc isSparta 
   731 4A58 AD 00 07			lda $0700
   732 4A5B C9 53			cmp #'S'
   733 4A5D F0 21			beq ok
   734 4A5F C9 52			cmp #'R'
   735 4A61 F0 1D			beq ok
   736 4A63 20 E8 4B			jsr Printf
   737 4A66 4E 6F 74 20 53 70 + 	.byte 'Not Sparta or Real Dos',155,0
   738 4A7E 38				sec
   739 4A7F 60				rts
   740 4A80			ok 
   741 4A80 18			    clc
   742 4A81 60			    rts
   743 				.endp		
   744 					
   745 					
   746 				//
   747 				//	Get drive spec and allow '*'
   748 				//
   749 4A82			.proc GetDrvWC
   750 4A82 38				sec
   751 4A83 24				.byte $24
   752 				.endp
   753
   754 				//
   755 				//	Get drive spec, disallowing '*'
   756 				//
   757 4A84			.proc GetDrv
   758 4A84 18				clc
   759 				.endp
   760
   761 4A85			.proc GetDriveID
   762 4A85 66 80			ror Temp1	; wildcard flag
   763 4A87 24 80			bit Temp1
   764 4A89 10 08			bpl @+
   765 4A8B C9 2A			cmp #'*'
   766 4A8D D0 04			bne @+
   767 4A8F A9 FA			lda #$FA	; '*' - $30
   768 4A91 18				clc
   769 4A92 60				rts
   770 4A93			@
   771 4A93 C9 3A			cmp #'9'+1
   772 4A95 B0 08			bcs NotDigit
   773 4A97 E9 2F			sbc #'0'-1
   774 4A99 90 1A			bcc Bad
   775 4A9B F0 18			beq Bad		; disallow 0
   776 4A9D 18				clc
   777 4A9E 60				rts
   778 4A9F			NotDigit
   779 4A9F C9 41			cmp #'A'	; handle A-I for 1-9
   780 4AA1 90 12			bcc Bad
   781 4AA3 C9 4A			cmp #'J'
   782 4AA5 B0 04			bcs @+
   783 4AA7 E9 3F			sbc #'A'-2	; carry is clear
   784 4AA9 18				clc
   785 4AAA 60				rts
   786 4AAB			@
   787 4AAB C9 50			cmp #'O'+1
   788 4AAD B0 06			bcs Bad
   789 4AAF E9 2F			sbc #'0'-1	; carry is clear, so subtract one less
   790 4AB1 90 02			bcc Bad
   791 4AB3			OK
   792 4AB3 18				clc
   793 4AB4 60				rts
   794 4AB5			Bad
   795 4AB5 38				sec
   796 4AB6			Abort
   797 4AB6 60				rts
   798 				.endp
   799
   800 4AB7			.proc Exit
   801 4AB7 20 E8 4B			jsr Printf
   802 4ABA 9B 50 72 65 73 73 + 	.byte 155,'Press a key to quit',155,0
   803 4AD0 6C 0A 00			jmp (DOSVEC)
   804 				.endp
   805
   806 					
   807 4AD3			.proc Crunch
   808 4AD3 4C FF FF			jmp $FFFF
   809 				.endp
   810
   811 4AD6			.proc Reboot
   812 4AD6 20 E8 4B			jsr Printf
   813 4AD9 9B 50 72 65 73 73 + 	.byte 155,'Press Y to reboot'
   814 4AEB 9B 59 6F 75 20 6D + 	.byte 155,'You may need to press [Option]:  ',0	
   815 4B0E 20 60 4D			jsr Input1
   816 4B11 C9 59			cmp #'Y'
   817 4B13 F0 03 4C 57 41		jne main
   818 4B18 4C 77 E4			jmp $E477
   819 				.endp
   820
   821 					
   822 4B1B			.proc GetKey
   823 4B1B AD 25 E4			lda $E425
   824 4B1E 48				pha
   825 4B1F AD 24 E4			lda $E424
   826 4B22 48				pha
   827 4B23 60				rts
   828 				.endp
   829 					
   830 4B24			.proc MakeDriveID
   831 4B24 18				clc
   832 4B25 69 30			adc #'0'	; everything gets $30 added
   833 4B27 60				rts	
   834 				.endp
   835 						
   836 4B28			.proc SetUpDCB
   837 4B28 A8				tay
   838 4B29 BE 43 4B			ldx DCBIndex,y	; we could multiply by 10 then add nine, but a table is easier
   839 4B2C A0 09			ldy #9
   840 4B2E			Loop
   841 4B2E BD 4F 4B			lda DCBTable,x
   842 4B31 99 02 03			sta DComnd,y
   843 4B34 CA				dex
   844 4B35 88				dey
   845 4B36 10 F6			bpl Loop
   846 4B38 A9 46 8D 00 03		mva #$46 DDevic	; ddevic and dunit are common to all
   847 4B3D A9 01 8D 01 03		mva #$01 DUnit
   848 4B42 60				rts
   849
   850 4B43			DCBIndex
   851 4B43 09 13 1D 27 31 3B + 	.byte 9,19,29,39,49,59,69,79,89,99,109,119
   852 				.endp
   853
   854 4B4F			DCBTable
   855 4B4F			DCBPutDR
   856 4B4F 91				.byte Cmd.GetDR
   857 4B50 80				.byte $80
   858 4B51 DA 4D			.word IOBuf
   859 4B53 06 00			.byte $06,$00
   860 4B55 20 00			.word $20	
   861 4B57 00 00			.byte $00,$00
   862 4B59			DCBGetDR
   863 4B59 91				.byte Cmd.GetDR	  
   864 4B5A 40				.byte $40		   
   865 4B5B DA 4D			.word IOBuf        
   866 4B5D 08 00			.byte $08,$00	   
   867 4B5F FF 00			.word $FF		  
   868 4B61 00 00			.byte $00,$00	  
   869 4B63			DCBGetSL
   870 4B63 92				.byte Cmd.GetSL	  
   871 4B64 40				.byte $40		  
   872 4B65 B4 4D			.word Path        
   873 4B67 06 00			.byte $06,$00	  
   874 4B69 16 00			.word $16		  
   875 4B6B 00 00			.byte $00,$00	  
   876 4B6D			DCBGetTD
   877 4B6D 93				.byte Cmd.GetTD	
   878 4B6E 40				.byte $40		
   879 4B6F DA 4D			.word IOBuf		
   880 4B71 06 00			.byte $06,$00	
   881 4B73 06 00			.word $06		
   882 4B75 00 00			.byte $00,$00	
   883 4B77			DCBSwap
   884 4B77 94				.byte Cmd.Swap
   885 4B78 00				.byte $00
   886 4B79 DA 4D			.word IOBuf
   887 4B7B 06 00			.byte $06,$00
   888 4B7D 00 00			.word 0
   889 4B7F 00 00			.byte $00,$00
   890 4B81			DCBUnmount
   891 4B81 95				.byte Cmd.Unmount
   892 4B82 00				.byte $00
   893 4B83 DA 4D			.word IOBuf
   894 4B85 06 00			.byte $06,$00
   895 4B87 00 00			.word 0
   896 4B89 00 00			.byte $00,$00
   897 4B8B			DCBMount
   898 4B8B 96				.byte Cmd.Mount
   899 4B8C 80				.byte $80
   900 4B8D DA 4D			.word IOBuf
   901 4B8F 06 00			.byte $06,$00
   902 4B91 0C 00			.word $0C
   903 4B93 00 00			.byte $00,$00
   904 4B95			DCBCreateAndMount
   905 4B95 97				.byte Cmd.CreateAndMount
   906 4B96 80				.byte $80
   907 4B97 DA 4D			.word IOBuf
   908 4B99 06 00			.byte $06,$00
   909 4B9B 0E 00			.word $0E
   910 4B9D 00 00			.byte $00,$00
   911 4B9F			DCBAutoToggle
   912 4B9F 98				.byte Cmd.AutoToggle
   913 4BA0 00				.byte $00
   914 4BA1 DA 4D			.word IOBuf
   915 4BA3 06 00			.byte $06,$00
   916 4BA5 00 00			.word 0
   917 4BA7 00 00			.byte $00,$00
   918 4BA9			DCBGetDrvNum
   919 4BA9 96				.byte Cmd.Mount
   920 4BAA 40				.byte $40
   921 4BAB DA 4D			.word IOBuf
   922 4BAD 06 00			.byte $06,$00
   923 4BAF 01 00			.word $01
   924 4BB1 01 00			.byte $01,$00
   925 4BB3			DCBSave
   926 4BB3 99				.byte Cmd.Save
   927 4BB4 00				.byte $00
   928 4BB5 DA 4D			.word IOBuf
   929 4BB7 06 00			.byte $06,$00
   930 4BB9 00 00			.word 0
   931 4BBB 00 00			.byte $00,$00	
   932 4BBD			DCBMountAndBoot
   933 4BBD 9A				.byte Cmd.MountAndBoot
   934 4BBE 80				.byte $80
   935 4BBF DA 4D			.word IOBuf
   936 4BC1 06 00			.byte $06,$00
   937 4BC3 0C 00			.word $0C
   938 4BC5 00 00			.byte $00,$00	
   939
   940 4BC7			Symbol
   941 4BC7 49 5F 54 44 4F 4E + 	.byte 'I_TDON  ',0
   942 					
    24 4BD0				icl 'printf.asm'
Source: /home/paul/eclipse-workspace/atari_rcl_MenuDos/printf.asm
     1 				;  printf.s - AspeQt printf library
     2 				;
     3 				;  Copyright (c) 2016 by Jonathan Halliday <fjc@atari8.co.uk>
     4 				;
     5 				;  This program is free software; you can redistribute it and/or modify
     6 				;  it under the terms of the GNU General Public License as published by
     7 				;  the Free Software Foundation; either version 2 of the License, or
     8 				;  (at your option) any later version.
     9 				;
    10 				;  This program is distributed in the hope that it will be useful,
    11 				;  but WITHOUT ANY WARRANTY; without even the implied warranty of
    12 				;  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    13 				;  GNU General Public License for more details.
    14 				;
    15 				;  You should have received a copy of the GNU General Public License
    16 				;  along with this program; if not, write to the Free Software
    17 				;  Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
    18 				;
    19
    20 				//
    21 				//	Tiny Printf
    22 				//	Temp1: String pointer
    23 				//	Temp3: Arg pointer
    24 				//	ArgIndex: index into args (offset from start of string)
    25 				//	StringIndex: index into string
    26 				//
    27
    28
    29 				//
    30 				//	Get pointer to next arg in Temp3
    31 				//
    32
    33 4BD0				.proc GetNextArg
    34 4BD0 A4 89			ldy ArgIndex
    35 4BD2 B1 80			lda (Temp1),y
    36 4BD4 85 84			sta Temp3
    37 4BD6 C8				iny
    38 4BD7 B1 80			lda (Temp1),y
    39 4BD9 85 85			sta Temp3+1
    40 4BDB C8				iny
    41 4BDC 84 89			sty ArgIndex
    42 4BDE A0 00			ldy #0		; leave 0 in Y
    43 4BE0 60				rts
    44 					.endp
    45
    46
    47 				//
    48 				//	Create arg pointer
    49 				//
    50
    51 4BE1				.proc GetArgPointer
    52 4BE1 20 03 4C			jsr StrLen	; step past string argument
    53 4BE4 C8				iny		; skip trailing NUL
    54 4BE5 84 89			sty ArgIndex
    55 4BE7 60				rts
    56 					.endp
    57
    58
    59
    60
    61 				//
    62 				//	In-line entry point
    63 				//
    64
    65 4BE8				.proc Printf
    66 4BE8 68				pla		; get address of in-line string
    67 4BE9 18				clc
    68 4BEA 69 01			adc #1
    69 4BEC A8				tay		; save LSB	
    70 4BED 68				pla		; get MSB
    71 4BEE 69 00			adc #0
    72 4BF0 AA				tax		; put MSB in X
    73 4BF1 98				tya		; put LSB in A
    74 4BF2 20 0B 4C			jsr PrintfAX	; Main expects string address in A,X
    75 4BF5			Return
    76 4BF5 A5 80			lda Temp1
    77 4BF7 18				clc
    78 4BF8 65 89			adc ArgIndex
    79 4BFA 85 80			sta Temp1
    80 4BFC 90 02			bcc @+
    81 4BFE E6 81			inc Temp1+1
    82 4C00			@
    83 4C00 6C 80 00			jmp (Temp1)
    84 					.endp
    85
    86
    87
    88 				//
    89 				//	Get string length
    90 				//
    91
    92 4C03				.proc StrLen
    93 4C03 A0 FF			ldy #$FF
    94 4C05			@
    95 4C05 C8				iny
    96 4C06 B1 80			lda (Temp1),y
    97 4C08 D0 FB			bne @-
    98 4C0A 60				rts
    99 					.endp
   100 					
   101
   102 4C0B				.proc PrintfAX
   103 4C0B				stax Temp1
Macro: STAX [Source: /home/paul/eclipse-workspace/atari_rcl_MenuDos/menu_1.asm]
     1 4C0B 85 80			sta TEMP1
     2 4C0D 86 81			stx TEMP1+1
Source: /home/paul/eclipse-workspace/atari_rcl_MenuDos/printf.asm
   104 4C0F			NoAX
   105 4C0F A9 00			lda #0
   106 4C11 85 8B			sta StringIndex
   107 4C13 20 E1 4B			jsr GetArgPointer
   108 4C16			Loop
   109 4C16 A4 8B			ldy StringIndex
   110 4C18 B1 80			lda (Temp1),y
   111 4C1A F0 4B			beq Done
   112 4C1C C9 25			cmp #'%'
   113 4C1E D0 40			bne PrintChar
   114 4C20 E6 8B			inc StringIndex
   115 4C22 C8				iny
   116 4C23 B1 80			lda (Temp1),y
   117 4C25 F0 40			beq Done
   118 4C27 C9 25			cmp #'%'
   119 4C29 F0 35			beq PrintChar
   120 4C2B 20 6C 4C			jsr GetFieldWidth
   121 4C2E B1 80			lda (Temp1),y
   122 4C30 AE 50 4C			ldx PFControlTab
   123 4C33			FindIt
   124 4C33 DD 50 4C			cmp PFControlTab,x
   125 4C36 F0 05			beq FoundIt
   126 4C38 CA				dex
   127 4C39 D0 F8			bne FindIt
   128 4C3B F0 26			beq NextChar
   129 					
   130 4C3D			FoundIt
   131 4C3D A9 4C			lda #> [NextChar-1]
   132 4C3F 48				pha
   133 4C40 A9 62			lda #< [NextChar-1]
   134 4C42 48				pha
   135 4C43 CA				dex
   136 4C44 8A				txa
   137 4C45 0A				asl
   138 4C46 AA				tax
   139 4C47 BD 57 4C			lda PFControlAddr+1,x
   140 4C4A 48				pha
   141 4C4B BD 56 4C			lda PFControlAddr,x
   142 4C4E 48				pha
   143 4C4F 60				rts
   144 				;
   145
   146 4C50			PFControlTab
   147 4C50 05				.byte 5
   148 4C51 63 70 73 62 78		.byte 'cpsbx'
   149 4C56			PFControlAddr
   150 4C56 9C 4C			.word PfChar-1
   151 4C58 AD 4C			.word PfPtr-1
   152 4C5A BF 4C			.word PfString-1
   153 4C5C F6 4C			.word PfByte-1
   154 4C5E C5 4C			.word PfHex-1
   155
   156 4C60			PrintChar
   157 4C60 20 39 4D			jsr PutChar
   158 4C63			NextChar
   159 4C63 E6 8B			inc StringIndex
   160 4C65 D0 AF			bne Loop
   161 4C67			Done
   162 4C67 A9 00 85 83			mva #0 Temp2+1
   163 4C6B 60				rts
   164 					.endp
   165
   166
   167
   168 4C6C				.proc GetFieldWidth
   169 4C6C A9 00			lda #0
   170 4C6E 85 8A			sta FieldWidth
   171 4C70 85 88			sta LeadingZeroFlag
   172 4C72 AA				tax
   173 4C73			Loop
   174 4C73 B1 80			lda (Temp1),y
   175 4C75 C9 3A			cmp #'9'+1
   176 4C77 B0 21			bcs Done
   177 4C79 38				sec
   178 4C7A E9 30			sbc #'0'
   179 4C7C 90 1C			bcc Done	
   180 4C7E D0 06			bne @+
   181 4C80 E0 00			cpx #0		; if first field width digit is zero, set leading zero flag
   182 4C82 D0 02			bne @+
   183 4C84 C6 88			dec LeadingZeroFlag
   184 4C86			@
   185 4C86 85 84			sta Temp3
   186 4C88 A5 8A			lda FieldWidth
   187 4C8A 0A				asl @		; fieldwidth * 2
   188 4C8B 85 85			sta Temp3+1
   189 4C8D 0A				asl @
   190 4C8E 0A				asl @		; fieldwidth * 8
   191 4C8F 18				clc
   192 4C90 65 85			adc Temp3+1	; (fieldwidth*2) + (fieldwidth*8)
   193 4C92 65 84			adc Temp3	; add in units
   194 4C94 85 8A			sta FieldWidth
   195 4C96 E8				inx
   196 4C97 C8				iny
   197 4C98 D0 D9			bne Loop
   198 4C9A			Done
   199 4C9A 84 8B			sty StringIndex
   200 4C9C 60				rts
   201 					.endp
   202 					
   203 					
   204
   205 4C9D				.proc PfChar
   206 4C9D 20 D0 4B			jsr GetNextArg	; leaves 0 in Y
   207 4CA0 B1 84			lda (Temp3),y
   208 4CA2 A6 8A			ldx FieldWidth
   209 4CA4 D0 01			bne Loop
   210 4CA6 E8				inx
   211 4CA7			Loop
   212 4CA7 20 39 4D			jsr PutChar	; doesn't clobber registers
   213 4CAA CA				dex
   214 4CAB D0 FA			bne Loop
   215 4CAD 60				rts
   216 					.endp
   217
   218
   219
   220 4CAE				.proc PfPtr
   221 4CAE 20 D0 4B			jsr GetNextArg
   222 4CB1 A0 01			ldy #1
   223 4CB3 B1 84			lda (Temp3),y
   224 4CB5 AA				tax
   225 4CB6 88				dey
   226 4CB7 B1 84			lda (Temp3),y
   227 4CB9 85 84			sta Temp3
   228 4CBB 86 85			stx Temp3+1
   229 4CBD 4C 2C 4D			jmp PFPrintStr
   230 					.endp
   231
   232
   233
   234 4CC0				.proc PfString
   235 4CC0 20 D0 4B			jsr GetNextArg
   236 4CC3 4C 2C 4D			jmp PFPrintStr
   237 					.endp
   238
   239
   240 					
   241 				//
   242 				//	Display Hex/BCD
   243 				//
   244
   245 4CC6				.proc PfHex
   246 4CC6 20 D0 4B			jsr GetNextArg
   247 4CC9 B1 84			lda (Temp3),y
   248 4CCB 48				pha
   249 4CCC 4A				lsr @
   250 4CCD 4A				lsr @
   251 4CCE 4A				lsr @
   252 4CCF 4A				lsr @
   253 4CD0 D0 04			bne NotZero
   254 4CD2 24 88			bit LeadingZeroFlag
   255 4CD4 10 07			bpl @+
   256 4CD6			NotZero
   257 4CD6 A8				tay
   258 4CD7 B9 E7 4C			lda HexTable,y
   259 4CDA 20 39 4D			jsr PutChar
   260 4CDD			@
   261 4CDD 68				pla
   262 4CDE 29 0F			and #$0F
   263 4CE0 A8				tay
   264 4CE1 B9 E7 4C			lda HexTable,y
   265 4CE4 4C 39 4D			jmp PutChar
   266 4CE7			HexTable
   267 4CE7 30 31 32 33 34 35 + 	.byte '0123456789ABDCEF'
   268 					.endp
   269
   270
   271
   272
   273 				//
   274 				//	Display decimal byte
   275 				//
   276
   277 4CF7				.proc PfByte
   278 4CF7 20 D0 4B			jsr GetNextArg
   279 4CFA B1 84			lda (Temp3),y
   280 4CFC A2 00			ldx #0
   281 4CFE			Loop1
   282 4CFE C9 64			cmp #100
   283 4D00 90 05			bcc HundredsDone
   284 4D02 E9 64			sbc #100
   285 4D04 E8				inx
   286 4D05 D0 F7			bne Loop1
   287 4D07			HundredsDone
   288 4D07 48				pha	; save remainder
   289 4D08 8A				txa
   290 4D09 F0 03			seq
   291 4D0B 20 22 4D			jsr PutDigit
   292 4D0E 68				pla
   293 4D0F A2 00			ldx #0
   294 4D11			Loop
   295 4D11 C9 0A			cmp #10
   296 4D13 90 05			bcc TensDone
   297 4D15 E9 0A			sbc #10
   298 4D17 E8				inx
   299 4D18 D0 F7			bne Loop
   300 4D1A			TensDone
   301 4D1A 48				pha
   302 4D1B 8A				txa
   303 4D1C F0 03			seq
   304 4D1E 20 22 4D			jsr PutDigit
   305 4D21 68				pla
   306 4D22			PutDigit
   307 4D22 18				clc
   308 4D23 69 30			adc #'0'
   309 4D25 4C 39 4D			jmp PutChar
   310 					.endp	
   311 					
   312 					
   313 					
   314 					
   315
   316 				//
   317 				//	Print plain string in A,X
   318 				//
   319 					
   320 4D28				.proc PutStrAX
   321 4D28				stax Temp3	; fall into PFPrintStr
Macro: STAX [Source: /home/paul/eclipse-workspace/atari_rcl_MenuDos/menu_1.asm]
     1 4D28 85 84			sta TEMP3
     2 4D2A 86 85			stx TEMP3+1
Source: /home/paul/eclipse-workspace/atari_rcl_MenuDos/printf.asm
   322 					.endp
   323
   324
   325 4D2C				.proc PFPrintStr
   326 4D2C A0 00			ldy #0
   327 4D2E			@
   328 4D2E B1 84			lda (Temp3),y
   329 4D30 F0 06			beq Done
   330 4D32 20 39 4D			jsr PutChar
   331 4D35 C8				iny
   332 4D36 D0 F6			bne @-
   333 4D38			Done
   334 4D38 60				rts
   335 					.endp
   336 					
   337 					
   338
   339 					
   340 				//
   341 				//	Put character
   342 				//
   343
   344 4D39				.proc PutChar
   345 4D39 84 86			sty Temp4
   346 4D3B 86 87			stx Temp4+1
   347 4D3D 48				pha
   348 4D3E A9 00			lda #0
   349 4D40 AA				tax
   350 4D41 9D 48 03			sta icblen,x
   351 4D44 9D 49 03			sta icblen+1,x
   352 4D47 A9 0B 9D 42 03		mva #$0B iccom,x
   353 4D4C 68				pla
   354 4D4D 20 56 E4			jsr ciov
   355 4D50 A4 86			ldy Temp4
   356 4D52 A6 87			ldx Temp4+1
   357 4D54 60				rts
   358 					.endp
   359
   360 					
   361 4D55				.proc ToUpper
   362 4D55 C9 7B			cmp #'z'+1
   363 4D57 B0 06			bcs NLow
   364 4D59 C9 61			cmp #'a'
   365 4D5B 90 02			bcc NLow
   366 4D5D E9 20			sbc #32
   367 4D5F			NLow
   368 4D5F 60				rts
   369 					.endp
   370 					
   371
   372 				//
   373 				//	input 1 character
   374 				//
   375 4D60				.proc Input1
   376 4D60 20 86 4D			jsr Input
   377 4D63 C0 03			cpy #03
   378 4D65 30 1D			bmi ok1
   379 4D67 20 E8 4B			jsr Printf
   380 4D6A 9B 45 6E 74 65 72 + 	.byte 155,'Enter only 1 character',0
   381 4D82 38				sec
   382 4D83 60				rts
   383 4D84			ok1
   384 4D84 18			    clc
   385 4D85 60				rts
   386 					.endp
   387
   388 						
   389 				//
   390 				//	input characters
   391 				//				
   392 4D86				.proc Input
   393 4D86 A9 00			lda #0
   394 4D88 AA				tax
   395 4D89 A9 FF			lda #$ff
   396 4D8B 9D 48 03			sta icblen,x
   397 4D8E A9 00			lda #$00
   398 4D90 9D 49 03			sta icblen+1,x
   399 4D93 A9 D9			lda #< [InputBuf]
   400 4D95 9D 44 03			sta icbadr,x
   401 4D98 A9 4E			lda #> [InputBuf]
   402 4D9A 9D 45 03			sta icbadr+1,x
   403 4D9D A9 05 9D 42 03		mva #$05 iccom,x
   404 4DA2 20 56 E4			jsr ciov
   405 4DA5 AD D9 4E		    lda InputBuf
   406 4DA8 BC 48 03		    ldy icblen,x
   407 4DAB 18			    clc
   408 4DAC 60				rts
   409 					.endp
   410 					
   411
   412 					
    25 						
    26 4DAD			SelectB
    27 4DAD 00				.byte 0 	
    28 4DAE			ArgFlag
    29 4DAE 00				.byte 0
    30 4DAF			CreateFlag
    31 4DAF 00				.byte 0
    32 4DB0			Slot
    33 4DB0 00				.byte 0
    34 4DB1			Drive
    35 4DB1 00				.byte 0
    36 4DB2			DriveID1
    37 4DB2 00				.byte 0
    38 4DB3			DriveID2
    39 4DB3 00				.byte 0
    40 4DB4			Path 
    41 = 4DB4				.ds 22
    42 4DCA			Filename
    43 = 4DCA				.ds 16		
    44 4DDA			IOBuf
    45 = 4DDA				.ds 254
    46 4ED8			lp
    47 = 4ED8			    .ds   1		
    48 4ED9			InputBuf
    49 = 4ED9				.ds 255
    50 				    
    51 					
    52 02E0-02E1> 00 40			run Start
    53 					
